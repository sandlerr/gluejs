#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    Glue = require('../index.js'),
    Minilog = require('minilog');

var opts = require('optimist')
    .usage('Usage: $0 --include <file/dir ...> --out filename.js')
    .options({
      'amd': { },
      'basepath': { 'default': process.cwd() },
      'cache': { default: true },
      'cache-path': { },
      'command': { },
      'exclude': { },
      'global': { },
      'global-require': { },
      'include': { },
      'jobs': { },
      'main': { 'default': 'index.js' },
      'out': { },
      'parse': { },
      'postlude': { },
      'remap': { },
      'replace': { },
      'reset-exclude': { },
      'silent': { },
      'source-url': { },
      'verbose': { },
      'version': { }
    })
    .boolean('cache')
    .boolean('report')
    .boolean('progress')
    .boolean('verbose')
    .boolean('parse'),
    argv = opts.parse(process.argv);

if(argv['version'] || argv['v'] ) {
  console.log(require('../package.json').version);
  process.exit();
}

if(!argv['include']) {
  return fs.createReadStream(__dirname + '/usage.txt').pipe(process.stdout).on('close', function () { process.exit(1) });
}

var g = new Glue();

// set verbose early, so that all messages are shown
if(argv['verbose']) {
  g.set('report', true);
  g.set('verbose', true);
  argv['progress'] = false;
}

// Booleans:
// --reset-exclude
// --source-url
// --global-require
// --parse
[ 'reset-exclude', 'source-url', 'global-require', 'parse' ].forEach(function(key) {
  if(argv[key]) {
    g.set(key, true);
  }
});

// Strings:
// --exclude
// --amd
// --umd
// --cache-method
// --command
// --transform
// --jobs
[ 'exclude', 'amd', 'umd', 'cache-method', 'command', 'transform', 'jobs', 'postlude' ].forEach(function(key) {
  if(argv[key]) {
    g.set(key, argv[key]);
  }
});

// --include
g.include(argv['include']);

// --global
g.export(argv['global']);

// --basepath
g.basepath(argv['basepath']);

// --main
g.main(argv['main'])

// --replace
if(argv['replace']) {
  // allow --replace foo=bar,baz=abc or --replace foo=bar --replace bar=abc
  if(Array.isArray(argv['replace'])) {
    argv['replace'].forEach(function(item) {
      var pos = item.indexOf('='),
          name = item.substring(0, pos),
          value = item.substring(pos+1);
      g.replace(name, value);
    });
  } else {
    argv['replace'].split(',').forEach(function(item) {
      var pos = item.indexOf('='),
          name = item.substring(0, pos),
          value = item.substring(pos+1);
      g.replace(name, value);
    });
  }

}
if(argv['remap']) {
  (Array.isArray(argv['remap']) ? argv['remap'] : [argv['remap']]).forEach(function(item) {
    var pos = item.indexOf('='),
        name = item.substring(0, pos),
        value = item.substring(pos+1);
    g.remap(name, value);
  });
}

// if not explicitly disabled and output is defined
if(argv['out']) {
  g.set('progress', true);
  argv['progress'] = true;
}

if(typeof argv['report'] !== 'undefined') {
  g.set('report', argv['report']);
}

if(typeof argv['progress'] !== 'undefined') {
  g.set('progress', argv['progress']);
}

// --silent
if(argv['silent']) {
  g.set('report', false);
  g.set('verbose', false);
  g.set('progress', false);
}

g.set('cache', argv['cache']);

if(argv['cache-path']) {
  g.set('cache-path', path.resolve(process.cwd(), argv['cache-path']));
}

if(argv['npm']) {
  process.stderr.write('Warning: the --npm flag is deprecated. ' +
    'Directly include the file path to module, e.g. --include ./node_modules/foo instead.\n');
}

// set this so that builds are invalidated as the version changes
g.set('gluejs-version', require('../package.json').version);

// -- out
if(argv['out']) {
  g.render(fs.createWriteStream(argv['out']));
} else {
  g.render(process.stdout);
}
